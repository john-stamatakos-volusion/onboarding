'use strict';
var algoliasearch = require('algoliasearch');
var _ = require('lodash');

exports.sync = function (config, productsJSON, cb) {

  // node examples/node.js
  var client = algoliasearch(config.algolia.appId, config.algolia.appKey);

  // WHAT THIS DOES:
  // 1) Create New Index
  // 2) Populate the New Index
  // 3) Set Settings on the New Index
  // 4) Set Settings on the Slave Indexes (for sort order)
  // 5) Copy the new Indexes to our Development Indexes

  // Let's do it!

  //-------------------------------------------------------
  // 1) create a new index
  //-------------------------------------------------------
  var ds = (new Date()).toISOString();
  var rootName = config.algolia.index.name;
  var name = rootName + ds;
  var i = client.initIndex(name);
  console.log('algolia index: ' + name + ' - created');


  //-------------------------------------------------------
  // 2) Populate the New Index
  //-------------------------------------------------------
  i.addObjects(productsJSON, function(err, content) {
    if (err) {
      console.error(err);
    } else {
      console.log('algolia index: ' + name + ' - populated');

      //-------------------------------------------------------
      // 3) Set Settings on the New Index
      // 4) Set Settings on the Slave Indexes (for sort order)
      //-------------------------------------------------------
      config.algolia.index.slaves.forEach(function(n) {
          setSlaves(config, client, name, [name + n.suffix]);
          setSettings(config, client, name + n.suffix, n.customRanking);
      });

      //-------------------------------------------------------
      // 5) Copy the New Indexes to our Development Indexes
      //-------------------------------------------------------
      client.copyIndex(name, rootName);
      config.algolia.index.slaves.forEach(function(n) {
          setSlaves(config, client, rootName, [rootName + n.suffix]);
          setSettings(config, client, rootName + n.suffix, n.customRanking);
      });
      console.log('algolia index: ' + rootName + ' - overwritten with ' + name);

      // cleanup old indices
      client.listIndexes(function(err, content) {

        // filter down to only those that start with 'mozu_apps_'
        var filteredArray = _.filter(content.items, function(item) {
          return _.startsWith(item.name, rootName);
        });
 
        // sort by createdAt
        _.sortByOrder(filteredArray, ['createdAt'], ['desc']);

        // remove the top 10 from the array because we want to always have 10 backups
        var i = 0;
        _.filter(filteredArray, function() {
          i++;
          if (i < 10) {
            return true;
          }
          return false;
        });


        // go ahead and deleteIndex on whatever is left in the array as long as it's over 7 days old
        _.forEach(filteredArray, function(item, key) {
          var createdAt = Date.parse(item.createdAt);
          var dateOffset = (24 * 60 * 60 * 1000) * 7; //7 days
          var sevenDaysAgo = new Date();
          sevenDaysAgo.setTime(sevenDaysAgo.getTime() - dateOffset);
          // if the index name starts with 'mozu_apps_' and it was created more than 7 days ago
          if (createdAt < sevenDaysAgo) {
            client.deleteIndex(item.name, logDeletedIndex(item.name));
          }
        });
      });

      //return the new index name
      cb(name);
    }
  });

};

function logDeletedIndex(name) {
  console.log('deleted the following indexes that was over 7 days old: ' + name);
}

function setSlaves(config, client, indexName, slaves) {
  var s = _.cloneDeep(config.algolia.index.settings);
  s.slaves = slaves;
  var i = client.initIndex(indexName);
  i.setSettings(s);
  console.log('algolia index: ' + indexName + ' - slave settings set');
}

function setSettings(config, client, name, sortOrder) {
  var i = client.initIndex(name);
  var s = _.cloneDeep(config.algolia.index.settings);
  s.customRanking = sortOrder;
  i.setSettings(s);
  console.log('algolia index: ' + name + ' - settings set');
}
