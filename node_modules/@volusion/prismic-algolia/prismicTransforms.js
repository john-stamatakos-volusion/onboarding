'use strict';

function rename(obj, oldName) {
  if(!obj.hasOwnProperty(oldName)) {
    return false;
  }
  var split = oldName.split('.');
  //make sure the root object exists
  if (!obj.hasOwnProperty(split[0])) {
    obj[split[0]] = {};
  }
  //set the child object
  obj[split[0]][split[1]] = obj[oldName];
  delete obj[oldName];
  return true;
}

exports.makeObjectDotNotationFriendly = function (o) {
  //source: http://stackoverflow.com/questions/14901683/how-do-i-reference-a-field-name-that-contains-a-dot-in-mustache-template
    var i;
    for (i in o) {
        if (typeof(o[i])=='object') {
          if (i.indexOf('.') > 0) {
            rename(o, i);
          }
          exports.makeObjectDotNotationFriendly(o[i]);
        }
    }
};

function formatCurrency(val) {
  return val.toFixed(2);
}

function renderStructedTextToAsHtmlAndAsText(o) {
  var i;
  for (i in o.fragments) {
    if (o.fragments[i].type === 'StructuredText') { //only doing this on StructuredText type, but prismic docs say you can run this on any type
      var asHtml = o.getStructuredText(i).asHtml({
        linkResolver: function (ctx, o, isBroken) {
          if (isBroken) { return '#broken'; }
          //TODO: Make this the correct URL format for our app
          return '/product/' + o.slug + ( ctx.maybeRef ? '?ref=' + ctx.maybeRef : '' );
      }});
      var asText = o.getStructuredText(i).asText();
      //append 2 new properties to the object
      o.fragments[i].asHtml = asHtml;
      o.fragments[i].asText = asText;
    } else if (i.indexOf('price') > 0) {
      o.fragments[i].asHtml = formatCurrency(o.fragments[i].value); //TODO: format it so the dollars, dot, and cents are styleable
      o.fragments[i].asText = formatCurrency(o.fragments[i].value);
    }
  }
}

exports.renderAllHtml = function(o) {
  var i;
  for (i in o) { //loop through all the results
    renderStructedTextToAsHtmlAndAsText(o[i]);
  }
};
